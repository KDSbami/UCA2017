//sort 4 numbers using only 5 if statements
print fibonacci using complexity n/2
//factorial using recursion(normal,if else)
sum of first and last digit
sum of second and second last digit
calculate sum of digits using recursion
//calculate reverse of a number using recursion and making a value returning function(from both sides)
prime factors using recursion
//calculate power using recursion
//second max in array(with minimun colplexity)
//input array{1,9,1,2,4,6} -> output array{7,16,3,3,13,7} using complexity n(we dont even know the size
 of array.. the array will end where -1 occurs)
//Pattern using recursion(using 3 loops)
 //A B C D E F E D C B A
 //A B C D E _ E D C B A
 //A B C D _ _ _ D C B A
 //A B C _ _ _ _ _ C B A
 //A B _ _ _ _ _ _ _ B A
 //A _ _ _ _ _ _ _ _ _ A
//initial zeries are zero and manipulaes zeroes are not zeres(removing noise from audio files)
//flood fill algorithm(robot ques)no need
in trees print branch whose sum is equal to given number

String
//reverse string using recursion
//count number of words in string
//print starting and ending index of every word in a string(startEnd.cpp)
//input-> __my____name_is__rahul_____ , output-> My_name_is_rahul
//reverse each word in a string
//remove spaces in starting and ending
//count of string and insert 0x20 betweek every 2 words(0x20.cpp)
//compressing and decompressing string
//find number of characters in a string
//input-> Sachin ramesh tendulkar , output-> S.R tendulkar(shortname.cpp)
//we have a string ans a word, we want to find if the word exists in string or not.


sorting
bubble
selection
insertion
merge
quick


search
binary


storage classes
//auto
//register
//extern
//static
